#!/usr/bin/php -q
<?php

$base = getenv("TOP");
if ($base) {
	require "$base/phplib/prepend.php";
	require "$base/inc/config.php";
	require "$base/inc/clilib.inc";
	require "$base/inc/getopt.inc";
}
else {
	require "../../phplib/prepend.php";
	require "../../inc/config.php";
	require "../../inc/clilib.inc";
	require "../../inc/getopt.inc";
}

function write_zone_file($zone, $hostmaster, $origin, $servers, $update)
{
	($zf = fopen($zone['zonefile'], "w")) || abort($zone['zonefile']."\n");
	$soattl = seconds_to_ttl($zone['ttl']);
	if ($update)
		$serial = get_serial($zone['zoneid']);
	else {
		$query = "SELECT serial FROM zones WHERE id = ".$zone['zoneid'];
		$rid = sql_query($query);
		list($serial) = mysql_fetch_row($rid);
		mysql_free_result($rid);
	}
	$domain = $zone['domain'];
	fputs($zf, ";\n; DO NOT EDIT\n; ".$zone['zonefile'].", generated by ProBIND\n");
	fputs($zf, "@\t$soattl IN\tSOA\t$origin.\t$hostmaster. (\n");
	fputs($zf, "\t\t\t\t\t$serial ; Serial");
	fputs($zf, "\n\t\t\t\t\t".seconds_to_ttl($zone['refresh'])." ; Refresh");
	fputs($zf, "\n\t\t\t\t\t".seconds_to_ttl($zone['retry'])." ; Retry");
	fputs($zf, "\n\t\t\t\t\t".seconds_to_ttl($zone['expire'])." ; Expire");
	fputs($zf, "\n\t\t\t\t\t$soattl ) ; Minimum TTL\n\n");
	# autogen the default NS records
	fputs($zf, auto_nsrecs($zone['domain'], seconds_to_ttl($zone['ttl']), $servers)).";\n";
	# output the explicit records
	fputs($zf, "; records from data base\n");
	$query = "SELECT domain, ttl, type, pref, data FROM records WHERE zone = ".$zone['zoneid']." AND type != 'SOA' AND NOT disabled ORDER BY domain" ;
	$rid = sql_query($query);
	while ($rr = mysql_fetch_array($rid)) {
		$rrttl = seconds_to_ttl($rr['ttl']);
		if ($rr['type'] == 'MX') {
			fputs($zf, $rr['domain']."\t$rrttl IN\tMX\t".$rr['pref']." ".$rr['data']."\n");
		} elseif ($rr['type'] == 'TXT') {
			fputs($zf, $rr['domain']."\t$rrttl IN\tTXT\t\"".$rr['data']."\"\n");
		} else {
			fputs($zf, $rr['domain']."\t$rrttl IN\t".$rr['type']."\t".$rr['data']."\n");
			if ($rr['type'] == 'PTR' || $rr['type'] == 'NS')
				$reversehosts[$rr['domain']]++;
		}
	}
	mysql_free_result($rid);
	if (preg_match("/\.in-addr.arpa(\.)?$/", $zone['domain']))
		fputs($zf, auto_ptrs($domain, seconds_to_ttl($zone['ttl']), $reversehosts));
	fputs($zf, "\n;;EOF\n"); // final mark
	fclose($zf);
}

#
# MAIN
#
# Parse command line & set up parameters
set_time_limit(0);
$opts = getopts($argv, "d:u");
if ($opts['d'])
	chdir($opts['d']) || abort("Can not Chdir to ".$opts['d']);
else
	abort("'-d DIR' option is mandatory, and DIR must be _absolute_ path");

# Prepare the $servers list
$servers = published_servers();

# Check the constants from the blackboard
if (!$DEFAULT_ORIGIN)
	$err .= "Could not find DEFAULT_ORIGIN setting in the database<P>\n";
if (!$DEFAULT_PTR_DOMAIN)
	$err .= "Could not find DEFAULT_PTR_DOMAIN setting in the database<P>\n";
if (!$DEFAULT_ORIGIN)
	$err .= "Could not find HOSTMASTER setting in the database<P>\n";
if (isset($err))
	abort($err);

# Just do it
$query = "SELECT zones.id AS zoneid, zones.domain AS domain, serial, refresh, retry, expire, master, zonefile, ttl FROM zones, records WHERE zones.id = records.zone AND records.type = 'SOA'";
# Restrict this if we also got a list of domain names
if (count($argv)) {
	$domains = "'".join("', '", $argv)."'";
	$query .= " AND zones.domain IN ($domains)";
} else {
	$query .= " AND zones.domain != 'TEMPLATE'";
}
$query .= " ORDER BY zones.domain";
$rid = sql_query($query);

while ($zone = mysql_fetch_array($rid)) {
	write_zone_file($zone, $HOSTMASTER, $DEFAULT_ORIGIN,
		$servers, $opts['u']);
}
mysql_free_result($rid);

# Done, shutdown & exit
exit(99);

?>
